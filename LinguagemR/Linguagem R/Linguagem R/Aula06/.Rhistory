####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 02 - Gráfico de linha                      #
#                                                  #
####################################################
# Venda de sorvete em relação a temperatura
vendasSorvete <- data.frame(bolasSorvete = c(200, 300, 400, 500, 600),   # Quantidade de sorvetes
Temperatura = c(20,  25,  27,  30,  32))     # Temperatura
# Nomes da colunas
colnames(vendasSorvete) <- c("Qtd.Sorvete","Temperatura")
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 02 - Gráfico de linha                      #
#                                                  #
####################################################
# Venda de sorvete em relação a temperatura
vendasSorvete <- data.frame(bolasSorvete = c(200, 300, 400, 500, 600),   # Quantidade de sorvetes
Temperatura = c(20,  25,  27,  30,  32))     # Temperatura
# Nomes da colunas
colnames(vendasSorvete) <- c("Qtd.Sorvete","Temperatura")
# Visualiza data.frame
vendasSorvete
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 02 - Gráfico de linha                      #
#                                                  #
####################################################
# Venda de sorvete em relação a temperatura
vendasSorvete <- data.frame(bolasSorvete = c(200, 300, 400, 500, 600),   # Quantidade de sorvetes
Temperatura = c(20,  25,  27,  30,  32))     # Temperatura
# Nomes da colunas
colnames(vendasSorvete) <- c("Qtd.Sorvete","Temperatura")
# Visualiza data.frame
vendasSorvete
# Cria gráfico de pontos
plot(vendasSorvete)
# Cria gráfico de pontos
plot(vendasSorvete, type = "o")
# Visualiza data.frame
vendasSorvete
# Cria gráfico de pontos
plot(vendasSorvete, type = "o")
# Cria gráfico de pontos
plot(x = vendasSorvete$Temperatura,  # Eixo X com a temperatura
y = vendasSorvete$Qtd.Sorvete)  # Eixo Y com a quantidade de sorvetes
# Cria gráfico de pontos
plot(x = vendasSorvete$Temperatura,  # Eixo X com a temperatura
y = vendasSorvete$Qtd.Sorvete)  # Eixo Y com a quantidade de sorvetes
# Adiciona linha entre os pontos
lines(x = vendasSorvete$Temperatura,
y = vendasSorvete$Qtd.Sorvete,
col = "red")
# Nomes da colunas
colnames(vendasSorvete) <- c("Qtd.Sorvete","Temperatura")
# Visualiza data.frame
vendasSorvete
# Cria gráfico de pontos
plot(x = vendasSorvete$Temperatura,  # Eixo X com a temperatura
y = vendasSorvete$Qtd.Sorvete)  # Eixo Y com a quantidade de sorvetes
# Adiciona linha entre os pontos
lines(x = vendasSorvete$Temperatura,
y = vendasSorvete$Qtd.Sorvete,
col = "red")
# Adiciona linha entre os pontos
lines(x = vendasSorvete$Temperatura,
y = vendasSorvete$Qtd.Sorvete,
col = "red")
# Visualiza data.frame
vendasSorvete
# Adiciona linha entre os pontos
lines(x = vendasSorvete$Temperatura,
y = vendasSorvete$Qtd.Sorvete,
col = "red")
# Cria gráfico de pontos
plot(x = vendasSorvete$Temperatura,  # Eixo X com a temperatura
y = vendasSorvete$Qtd.Sorvete,
type = "o")  # Eixo Y com a quantidade de sorvetes
# Adiciona linha entre os pontos
lines(x = vendasSorvete$Temperatura,
y = vendasSorvete$Qtd.Sorvete,
col = "red")
# Cria gráfico de pontos
plot(x = vendasSorvete$Temperatura,  # Eixo X com a temperatura
y = vendasSorvete$Qtd.Sorvete,
col = "red"
type = "o")  # Eixo Y com a quantidade de sorvetes
# Cria gráfico de pontos
plot(x = vendasSorvete$Temperatura,  # Eixo X com a temperatura
y = vendasSorvete$Qtd.Sorvete,
col = "red",
type = "o")  # Eixo Y com a quantidade de sorvetes
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 02 - Gráfico de linha                      #
#                                                  #
####################################################
dados <- economics %>% rename(Data = date, DCP=pce, população=pop,
TPP=psavert, DMD=uempmed, TD = unemploy)
ggplot(dados) +
geom_line(aes(Data. TD/populacao))
ggplot(dados) +
geom_line(aes(Data, TD/populacao))
ggplot(dados) +
geom_line(aes(Data, TD / populacao))
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 02 - Gráfico de linha                      #
#                                                  #
####################################################
dados <- economics %>% rename(Data = date, DCP=pce, populacao=pop,
TPP=psavert, DMD=uempmed, TD = unemploy)
ggplot(dados) +
geom_line(aes(Data, TD / populacao))
ggplot(dados)
# Em qual crise houve a maior duração do desemprego?
ggplot(dados) +
geom_line(aes(Data, DMD))
# Como foi a reserva de poupança no período de estudo?
ggplot(dados) +
geom_line(aes(Data, TPP))
str(dados)
plot(dados$x1, dados$y1) # plot(y1 ~ x1, data=dados) produz o mesmo resultado.
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 04 - Gráfico de pontos                     #
#                                                  #
####################################################
# Dados anscombe é um conjunto de dados didáticos para uso em regressões lineares.
data(anscombe)
# Atribuição
dados <- anscombe
# Ver a estrutura dos dados
str(dados)
plot(dados$x1, dados$y1) # plot(y1 ~ x1, data=dados) produz o mesmo resultado.
# Gráficos de séries
plot(dados$x1)
# Gráficos de barra
plot(as.factor(dados$x1))
# Boxplot
plot(as.factor(dados$x1), dados$y1)
# Painéis gráficos
plot(dados)
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 05 - Gráficos gerais                       #
#                                                  #
####################################################
riqueza <- c(15,18,22,24,25,30,31,34,37,39,41,45)
area <- c(2,4.5,6,10,30,34,50,56,60,77.5,80,85)
area.cate <- rep(c("pequeno", "grande"), each=6)
plot(riqueza~area)
plot(area,riqueza) # o mesmo que o anterior
boxplot(riqueza~area.cate)
barplot(riqueza)
# Plotagem dos pontos no gráfico
plot(riqueza~area)
# Plotagem dos pontos no gráfico
plot(riqueza~area)
# Plotagem dos pontos no gráfico
plot(riqueza~area, las=3)
# Plotagem dos pontos no gráfico
plot(riqueza~area, las=1)
# Plotagem dos pontos no gráfico
plot(riqueza~area, las=3)
# Plotagem dos pontos no gráfico
plot(riqueza~area, las=1)
par(las=1)
plot(riqueza~area, las=3)
# Plotagem dos pontos no gráfico
plot(riqueza~area, las=1)
# Plotagem dos pontos no gráfico
plot(riqueza~area, las=1)
# Plotagem dos pontos no gráfico
plot(area,riqueza) # o mesmo que o anterior
plot(riqueza~area, cex=2)
# Alterando o tamanho de fonte das legendas
plot(riqueza~area, cex=5)
# Alterando o tamanho de fonte das legendas
plot(riqueza~area, cex=1)
# Alterando o tamanho dos pontos
plot(riqueza~area, cex=5)
# Salvando o gráfico
jpeg(filename = "grafico.jpg")
# Alterando o tamanho dos pontos
plot(riqueza~area, cex=5)
# Salvando o gráfico
jpeg(filename = "grafico.jpg")
png(filename = "g1.png")
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 01 - Gráficos básicos                      #
#                                                  #
####################################################
# Criando um variável categorica para armazenar os nível
# de estadiamento de um câncer
estadiamento <- c("moderado", "grave", "grave", "grave", "leve", "leve")
# Criando um gráfico de bar plot
barplot(table(estadiamento))
# Criando uma ordenação desejada
estadiamento.ordenado <- factor(estadiamento,
levels=c("leve", "moderado", "grave"),
ordered=TRUE)
# Pltando o novo gráfico de barras
barplot(table(estadiamento.ordenado))
# Gráfico de barra multipla
tabela1 <- table(mpg$drv, mpg$fl)
barplot(tabela1, legend.text=TRUE)
# Usando uma paleta de cores chamada terrain.colors com 3 cores
barplot(tabela1,
legend.text=TRUE,
args.legend = list(x='topleft'), # ajusta a legenda
col=terrain.colors(3),           # colocar corres nas barras
names.arg = c(c="gas",           # adiciona legenda
d="diesel",
e="ethanol",
p="premium",
r="regular"))
# Pltando o novo gráfico de barras
barplot(table(estadiamento.ordenado))
# Gráfico de barra multipla
tabela1 <- table(mpg$drv, mpg$fl)
barplot(tabela1, legend.text=TRUE)
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 01 - Gráficos básicos                      #
#                                                  #
####################################################
# Criando um variável categorica para armazenar os nível
# de estadiamento de um câncer
estadiamento <- c("moderado", "grave", "grave", "grave", "leve", "leve")
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 01 - Gráficos básicos                      #
#                                                  #
####################################################
# Criando um variável categorica para armazenar os nível
# de estadiamento de um câncer
estadiamento <- c("moderado", "grave", "grave", "grave", "leve", "leve")
# Criando um gráfico de bar plot
barplot(table(estadiamento))
# Criando uma ordenação desejada
estadiamento.ordenado <- factor(estadiamento,
levels=c("leve", "moderado", "grave"),
ordered=TRUE)
# Pltando o novo gráfico de barras
barplot(table(estadiamento.ordenado))
# Gráfico de barra multipla
tabela1 <- table(mpg$drv, mpg$fl)
barplot(tabela1, legend.text=TRUE)
# Usando uma paleta de cores chamada terrain.colors com 3 cores
barplot(tabela1,
legend.text=TRUE,
args.legend = list(x='topleft'), # ajusta a legenda
col=terrain.colors(3),           # colocar corres nas barras
names.arg = c(c="gas",           # adiciona legenda
d="diesel",
e="ethanol",
p="premium",
r="regular"))
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 02 - Gráfico de linha                      #
#                                                  #
####################################################
# Qual as épocas onde ouve a maior taxa de desemprego no período de estudo?
dados <- economics %>% rename(Data = date, DCP=pce, populacao=pop,
TPP=psavert, DMD=uempmed, TD = unemploy)
ggplot(dados) +
geom_line(aes(Data, TD / populacao))
# Em qual crise houve a maior duração do desemprego?
ggplot(dados) +
geom_line(aes(Data, DMD))
# Como foi a reserva de poupança no período de estudo?
ggplot(dados) +
geom_line(aes(Data, TPP))
var1 <- "Olá mundo"
var2 <- 1
var3 <- TRUE
var1 <- "Olá mundo"
var2 <- 1
var3 <- TRUE
typeof(var1, var2, var3)
typeof(var1)
typeof(var2)
typeof(var3)
var4 <- is.integer(2)
typeof(var4)
var4 <- 2L
typeof(var4)
var1 <- 1
var2 <- 2
result1 <- var1 == var2 # igual a
print(result1)
res2 <- !(6 != 6)
print(res2)
res2 <- (6 != 6)
print(res2)
print(5 %/% 3)
print(5 %% 3)
y <- 20
if (y == 20) {
res <- "Número igual a 20"
} else {
res <- "Número diferente de 20"
}
print(res)
x <- c(1, 2, 4, 5, 7, 9, 11)
for (i in x)
x2 <- i+2
}
x <- c(1, 2, 4, 5, 7, 9, 11)
for (i in x)
x2 <- i+2
}
x <- c(1, 2, 4, 5, 7, 9, 11)
for (i in x) {
x2 <- i+2
}
print(x2)
x <- 1
while(x <= 10)
x <- x + 1
}
x <- 1
while(x <= 10) {
x <- x + 1
}
print(x)
i <- 1
soma <- 0
repeat{
if (i <= 10)
soma <- soma + i
i <- i + 1
} else {
i <- 1
soma <- 0
repeat{
if (i <= 10) {
soma <- soma + i
i <- i + 1
} else {
break
}
}
i <- 1
soma <- 0
repeat{
if (i <= 10) {
soma <- soma + i
i <- i + 1
} else {
break
}
}
print(soma)
i <- 1
soma <- 0
repeat{
if (i <= 10) {
soma <- soma + i
i <- i + 1
} else {
break
}
}
print(soma)
i <- 1
soma <- 0
repeat{
if (i <= 10) {
soma <- soma + i
i <- i + 1
print(soma)
} else {
break
}
}
logico <- c(F, T)
print(logico)
matriz <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2)
print(matriz[2,2])
v <- c("Co", "Co", "Co", "Tr", "Tr", "Tr")
m <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2)
minha.lista <- list(m, 1, v)
print(minha.lista[2])
numeros <- c(2, 5, 6, 78, 2, 233)
letras <- c("a", "b", "c", "d", "e", "f")
y <- F
dados <- data.frame(valores = numeros, letras, categorias = y)
print(dados[2, 1])
# A lista de pacotes encontra-se disponível no CRAN (Comprehensive R Archive Network)
## Número atual de pacotes no CRAN
nrow(available.packages())
## Verificar pacotes carregados
search()
frase <- "Eu sempre fui pobre, mas hoje"
substr(x = frase, start = 15, stop = 19)
# Trunca (corta) as decimais de um valor
trunc(x = -10.723456)
# Arredondamento de um valor na 4º casa decimal
round(-10.723456, digits = 4)
if (!require(tidyverse)) install.packages(("tidyverse"))
library("tidyverse")
bike <- read_csv("raw_bike_data.csv")
if (!require(tidyverse)) install.packages(("tidyverse"))
library("tidyverse")
setwd("d:/Users/eduardo.mendes/Desktop/Linguagem R/Aula06")
bike <- read_csv("raw_bike_data.csv")
if (!require(tidyverse)) install.packages(("tidyverse"))
library("tidyverse")
getwd()
setwd("d:/Users/eduardo.mendes/Desktop/Linguagem R/Aula06")
bike <- read_csv("raw_bike_data.csv")
getwd()
# Entrada de dados scan() - digite no console (2 enter - sai)
y <- scan()
print(texto)
# Mostra e muda o diretorio de trabalho
getwd()
setwd("d:/Users/eduardo.mendes/Desktop/Linguagem R/Aula06")
dados01 <- read.table("crabs.csv", header = TRUE, sep = ";", dec = ",")
print(dados01)
# As funções read.csv() e read.csv2()
dados02 <- read.csv2("crabs.csv")
print(dados02)
dados03 <- read.csv2("crabs.csv", stringsAsFactors = FALSE)
print(dados03)
# Tamanho do conjunto de dados
dim(dados01)
# Conferir a estrutura dos dados importados
str(dados01)
# Visualizando algumas linhas iniciais e finais dos dados
head(dados01)
tail(dados01)
# Checar os nomes das variáveis
names(dados01)
# Uma rápida análise descritiva
summary(dados01)
# Objetos criados até o momento nesta seção
ls()
if (!require(tidyverse)) install.packages(("tidyverse"))
library("tidyverse")
getwd()
setwd("d:/Users/eduardo.mendes/Desktop/Linguagem R/Aula07")
bike <- read_csv("raw_bike_data.csv")
table(is.na(bike))
if (!require(tidyverse)) install.packages(("tidyverse"))
library("tidyverse")
getwd()
setwd("d:/Users/eduardo.mendes/Desktop/Linguagem R/Aula07")
bike <- read_csv("raw_bike_data.csv")
table(is.na(bike)) # Encontra dados ausentes no data frame
bike$sources[is.na(bike$sources)] <- "Desconhecida" # Substitui NA por Desconhecida
if (!require(stringr)) install.packages(("stringr"))
library("stringr")
grandesMetropolis <- c("São Pauloxx", "New York", "Sapiranga", "Londres")
str_remove(
string = grandesMetropolis,
pattern = "xx"
)
dados01 <- read.table("crabs.csv", header = TRUE, sep = ";", dec = ",")
print(dados01)
setwd("d:/Users/eduardo.mendes/Desktop/Linguagem R/Aula06")
dados01 <- read.table("crabs.csv", header = TRUE, sep = ";", dec = ",")
print(dados01)
typeof(dados01)
dd <- read.table(file = "municipiosbrasil.csv", sep = "\t", header = T,
dec = ".", na.strings = c("NULL", "NA", ""), as.is = TRUE)
vl <- dd$Province %in% "Amazonas"
vl
sum(vl)
data(iris)
write.table(iris, file = "iris01.csv")
if (!require(readxl)) install.packages(("readxl"))
library("readxl")
# Mostra e muda o diretório de trabalho
getwd()
setwd("d:/Users/eduardo.mendes/Desktop/Linguagem R/Aula06")
dados01 <- read_excel("crabs.xls", sheet = "Plan1")
dados01
typeof(dados01)
if (!require(tidyverse)) install.packages(("tidyverse"))
library("tidyverse")
data("mpg")
mpg
cfv <- filter(mpg, manufacturer %in% c("chevrolet", "ford", "volkswagen"))
cfv # novo data frame
unique(cfv$manufacturer)
typeof(cfv)
