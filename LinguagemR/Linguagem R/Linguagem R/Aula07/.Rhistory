type="l",
main="Gráfico Riqueza por Área",
col=blues9,
las=1)
# Alterando a legenda dos eixos
plot(area,riqueza,
type="l",
main="Gráfico Riqueza por Área",
col=blues9,
xlab='Área',
ylab='Riqueza')
# Alterando a legenda dos eixos
plot(area,riqueza,
type="l",
main="Gráfico Riqueza por Área",
col=blues9,
xlab='Área',
ylab='Riqueza')
# Um dos vetores pode ser otimido. O R assume número inteiros no x
plot(area,
type="l")
# Colocando título no gráfico
plot(area,riqueza,,
type="l",
main="Gráfico Riqueza por Área")
# Colorindo os pontos
plot(area,riqueza,
type="l",
main="Gráfico Riqueza por Área",
col="forestgreen") # blue, red, purple
# Alterando a legenda dos eixos
plot(area,riqueza,
type="l",
main="Gráfico Riqueza por Área",
col=blues9,
xlab='Área',
ylab='Riqueza')
# Qual as épocas onde ouve a maior taxa de desemprego no período de estudo?
dados <- economics %>% rename(Data = date, DCP=pce, populacao=pop,
TPP=psavert, DMD=uempmed, TD = unemploy)
ggplot(dados) +
geom_line(aes(Data, TD / populacao))
# Em qual crise houve a maior duração do desemprego?
ggplot(dados) +
geom_line(aes(Data, DMD))
# Como foi a reserva de poupança no período de estudo?
ggplot(dados) +
geom_line(aes(Data, TPP))
# Qual as épocas onde ouve a maior taxa de desemprego no período de estudo?
dados <- economics %>% rename(Data = date, DCP=pce, populacao=pop,
TPP=psavert, DMD=uempmed, TD = unemploy)
# Colocando título no gráfico
plot(area,riqueza,,
type="l",
main="Gráfico Riqueza por Área")
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 02 - Gráfico de linha                      #
#                                                  #
####################################################
# Construção dos vetores
riqueza <- c(15,18,22,24,25,30,31,34,37,39,41,45)
area <- c(2,4.5,6,10,30,34,50,56,60,77.5,80,85)
# Categorização da área
area.cate <- rep(c("pequeno", "grande"), each=6)
# Acessando o help da função
?plot
# Plotagem dos pontos no gráfico
plot(riqueza~area,
type="l") # função plot permite a construção de gráfico
# Função plot recebe 2 vetores x e y
plot(area,riqueza,
type="l") # o mesmo que o anterior
# Um dos vetores pode ser otimido. O R assume número inteiros no x
plot(area,
type="l")
# Colocando título no gráfico
plot(area,riqueza,,
type="l",
main="Gráfico Riqueza por Área")
# Colorindo os pontos
plot(area,riqueza,
type="l",
main="Gráfico Riqueza por Área",
col="forestgreen") # blue, red, purple
# Qual as épocas onde ouve a maior taxa de desemprego no período de estudo?
dados <- economics %>% rename(Data = date, DCP=pce, populacao=pop,
TPP=psavert, DMD=uempmed, TD = unemploy)
# Usando o pacote ggplot2
# Instalando o pacote
if (!require(ggplot2)) install.packages(("ggplot2"))
# Carregando o pacote
library("ggplot2")
?ggplot2
ggplot2(area,riqueza) +
geom_line()
ggplot(area,riqueza) +
geom_line()
ggplot(x=area,y=riqueza) +
geom_line()
ggplot(x=area,y=riqueza) +
geom_line()
ggplot(x=area,y=riqueza) +
geom_line()
ggplot(aes(x=area,y=riqueza)) +
geom_line()
# Usando o pacote ggplot2
data=data.frame(tempo=TEMPO,Umidade=UR,Temperatura=TM)
# Conjunto de dados temperatura x umidade
TM=c(23.4,19.8,12.8,16.3,20.8,17.4,20.0,21.8,21.8,20.6,20.3,20.6,20.4,18.1,20.2,19.3,17.2,20.8,
20.7,17.4,21.8,23.8,25.8,26.3,25.3,24.5,21.4,23.3,24.3,21.2,24.3,23.6,23.5,22.3,21.4,19.7,
22.1,20.5,22.3,21.8,18.0,21.3,24.1,23.9,23.6,23.3,23.2,22.0,22.4,20.8,20.2,22.6,23.7,19.9,
19.7,21.4,22.5,21.4,20.4,24.5,22.7,20.3,23.7,24.0,23.6,21.6,22.0,22.6,21.3,22.5,22.2,26.3,
27.2,28.3,25.9,25.8,26.6,24.9,20.8,19.4,21.6,22.2,23.8,20.9,22.9,25.0,23.7,23.8,24.8,24.8,
24.8,25.4,24.4,23.5,24.7,25.3,25.2,23.8,22.8,22.2,26.0,27.8,28.1,25.8,26.8,25.3,25.0,26.6,
26.4,26.7,26.8,25.5,24.0,23.2,22.6,23.4,24.5,25.7,25.0,26.4,26.2,26.2,26.9,24.7,25.6,25.0,
23.7,22.8,25.5,26.3,26.9,25.1,26.7,25.6,24.5,26.2,26.2,24.4,26.3,25.6,24.4,24.0,26.7,28.2,
26.3,26.7,25.4,24.8,24.6,26.3,28.7,28.6,26.3,28.6,29.0,28.2,24.3,23.0,22.9,24.6,26.6,28.5,
28.0,25.5,23.2,23.7,23.0,22.4,23.6,23.6,23.5,23.5,22.9,23.5)
UR=c(68,93,86,55,54,51,45,43,55,54,58,57,64,89,73,80,96,71,86,95,74,62,49,43,51,62,86,73,64,95,
68,77,86,93,76,63,69,94,88,89,88,67,76,84,71,88,83,83,74,54,51,61,74,97,94,97,66,58,65,56,
82,93,66,64,67,65,67,67,63,62,76,51,57,54,80,65,65,65,93,88,63,68,65,98,83,64,67,62,59,78,
75,70,63,62,53,46,42,55,60,51,51,47,42,60,62,77,74,58,63,67,66,83,81,87,95,80,71,68,74,69,
75,74,75,90,86,91,91,98,84,81,74,82,69,77,84,78,74,87,75,80,89,90,77,73,82,80,82,75,79,70,
61,63,74,63,58,62,76,76,74,69,64,56,61,86,94,85,78,91,82,80,81,85,89,84)
TEMPO=c(1:174)
# Usando o pacote ggplot2
data=data.frame(tempo=TEMPO,Umidade=UR,Temperatura=TM)
attach(data)
ggplot(data,
aes(x = tempo))+
geom_line(aes(y = Temperatura,
colour = "Temperatura"),
col="red")+
xlab("Tempo (dias)")
ggplot(data, aes(x = tempo))+
geom_line(aes(y = Umidade, colour = "Umidade"),
col="blue")+
xlab("Tempo (dias)")
# Juntando os dois gráficos
(plots=ggplot(data, aes(x = tempo)) +
geom_line(aes(y = Umidade,
colour = "Umidade"))+
scale_x_continuous() +
geom_line(aes(y = Temperatura,
colour = "Temperatura")))
# Criando o eixo Y secundário
(plots=plots +
scale_y_continuous(sec.axis = sec_axis(~ . *1 ),
limits = c(0, 100)))
# Nomeando eixo Y primário e secundário
(plots=plots+
scale_y_continuous(name = expression("Umidade (%)"),
sec.axis = sec_axis(~ . *1 ,
name = expression("Temperatura"^o*"C"))))
# Organizando a legenda
(plots=plots+
scale_colour_manual("",
breaks = c("Umidade", "Temperatura"),
values = c("red","blue")))
# Removendo linha de grade e cor de fundo
(plots=plots+theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()))
dev.off()
# Salvando imagem em Tif
tiff("Secundário.tif", res=100, units = "in", width=8, height = 5)
ggplot(data, aes(x = tempo)) +
geom_line(aes(y = Umidade, colour = "Umidade"))+
scale_x_continuous() +
scale_y_continuous(name = expression("Umidade (%)"),
sec.axis = sec_axis(~ . *1 , name = expression("Temperatura"^o*"C")),
limits = c(0, 100)) +
geom_line(aes(y = Temperatura, colour = "Temperatura")) +
scale_colour_manual("", breaks = c("Umidade", "Temperatura"), values = c("red","blue")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
dev.off()
####################################################
#                                                  #
# Módulo 8 - Arquivos                              #
#                                                  #
# Vídeo 03 - Gráfico de linha e pontos             #
#                                                  #
####################################################
# Venda de sorvete em relação a temperatura
vendasSorvete <- data.frame(bolasSorvete = c(200, 300, 400, 500, 600),   # Quantidade de sorvetes
Temperatura = c(20,  25,  27,  30,  32))     # Temperatura
# Nomes da colunas
colnames(vendasSorvete) <- c("Qtd.Sorvete","Temperatura")
# Visualiza data.frame
vendasSorvete
# Cria gráfico de pontos
plot(vendasSorvete)
# Cria gráfico de pontos
plot(x = vendasSorvete$Temperatura,  # Eixo X com a temperatura
y = vendasSorvete$Qtd.Sorvete)  # Eixo Y com a quantidade de sorvetes
# Adiciona linha entre os pontos
lines(x = vendasSorvete$Temperatura,
y = vendasSorvete$Qtd.Sorvete,
col = "red")
# Venda de sorvetes que havia sido estimada
estimativaSorvete <- c(150, 290, 370, 410, 503)
# Adiciona linha entre os pontos
lines(x = vendasSorvete$Temperatura,
y = estimativaSorvete,
col = "blue")
####################################################
#                                                  #
# Módulo 8 - Graficos                              #
#                                                  #
# Vídeo 04 - Gráfico de barras                     #
#                                                  #
####################################################
# Dados anscombe é um conjunto de dados didáticos para uso em regressões lineares.
data(anscombe)
# Atribuição
dados <- anscombe
# Ver a estrutura dos dados
str(dados)
# Gráficos de pontos
plot(dados$x1, dados$y1) # plot(y1 ~ x1, data=dados) produz o mesmo resultado.
# Gráficos de séries
plot(dados$x1)
# Gráficos de barra
plot(as.factor(dados$x1))
# Boxplot
plot(as.factor(dados$x1), dados$y1)
# Painéis gráficos
plot(dados)
####################################################
#                                                  #
# Módulo 8 - Graficos                              #
#                                                  #
# Vídeo 04 - Gráfico de barras                     #
#                                                  #
####################################################
data(iris)
hist(iris$Petal.Length, breaks= 30, col="blue")
hist(iris$Petal.Length, breaks= 0:7, col = "red")
dens = density(iris$Petal.Length)
# A construção de histogramas pode ser conseguida
# através do uso da função hist.
hist(iris$Petal.Length, breaks= 30, col="blue")
hist(iris$Petal.Length, breaks= 0:7, col = "red")
dens = density(iris$Petal.Length)
hist(iris$Petal.Length,
breaks= 10,
xlim=range(dens$x),
ylim =c(0,0.6),
probability = T,
col = “red”)
hist(iris$Petal.Length,
breaks= 10,
xlim=range(dens$x),
ylim =c(0,0.6),
probability ="T",
col = “red”)
hist(iris$Petal.Length,
breaks= 10,
xlim=range(dens$x),
ylim =c(0,0.6),
col = “red”)
barplot(table(iris$Species),
col = "blue")
horiz = T)
col = "orange”)
barplot(tapply(InsectSprays$count,
InsectSprays$spray,
mean))
# Boxplot
ggplot(df, aes(y = tamanho, x = tratamento)) +
geom_bar(stat = "identity")
# Simulando um banco de dados
df <- data.frame(tratamento = c("a", "b", "c"),
tamanho = c(1.3, 1.9, 3.2))
# Boxplot
ggplot(df, aes(y = tamanho, x = tratamento)) +
geom_bar(stat = "identity")
# Usando o pacote ggplot2
# Instalando o pacote
if (!require(ggplot2)) install.packages(("ggplot2"))
# Carregando o pacote
library("ggplot2")
# Simulando um banco de dados
df <- data.frame(tratamento = c("a", "b", "c"),
tamanho = c(1.3, 1.9, 3.2))
# Boxplot
ggplot(df, aes(y = tamanho, x = tratamento)) +
geom_bar(stat = "identity")
#Gráfico de Barras com preenchimento colorido
ggplot(df,
aes(y = tamanho,
x = tratamento)) +
geom_bar(stat = "identity",
fill = "tomato")
#Gráfico de Barras com contorno colorido
ggplot(df,
aes(y = tamanho,
x = tratamento)) +
geom_bar(stat = "identity",
color = "tomato")
#Gráfico de Barras com largura modificada
ggplot(df,
aes(y = tamanho,
x = tratamento)) +
geom_bar(stat = "identity",
width = .75) +
ggtitle("width = .75")
#Gráfico de Barras com largura modificada
ggplot(df,
aes(y = tamanho,
x = tratamento)) +
geom_bar(stat = "identity",
width = 0.25) +
ggtitle("width = .25")
#Gráfico de Barras Vertical
ggplot(df,
aes(y = tamanho,
x = tratamento)) +
geom_bar(stat = "identity")
#Gráfico de Barras Horizontal
ggplot(df,
aes(y = tamanho,
x = tratamento)) +
geom_bar(stat = "identity") +
coord_flip()
#Gráfico de Barras com preenchimento colorido
ggplot(df,
aes(y = tamanho,
x = tratamento,
fill = tratamento)) +
geom_bar(stat = "identity")
#Gráfico de Barras
ggplot(df,
aes(y = tamanho,
x = tratamento)) +
geom_bar(stat = "identity",
fill = gray(.3)) +
scale_y_continuous(limits = c(0,3.5),
breaks = seq(0,3.5,.5)) +
theme_classic(base_size = 18) +
xlab("Tratamento") +
ylab("Comprimento da plântula (cm)")
?cate
?rep
# Colocando título no gráfico
plot(area,
main="Gráfico Riqueza por Área")
# Colocando título no gráfico
plot(area,riqueza,,
type="l",
main="Gráfico Riqueza por Área")
####################################################
#                                                  #
# Módulo 8 - Graficos                              #
#                                                  #
# Vídeo 02 - Gráfico de linha                      #
#                                                  #
####################################################
# Construção dos vetores
riqueza <- c(15,18,22,24,25,30,31,34,37,39,41,45)
area <- c(2,4.5,6,10,30,34,50,56,60,77.5,80,85)
# Cria gráfico de pontos
plot(x = vendasSorvete$Temperatura,  # Eixo X com a temperatura
y = vendasSorvete$Qtd.Sorvete)  # Eixo Y com a quantidade de sorvetes
####################################################
#                                                  #
# Módulo 8 - Gráficos                              #
#                                                  #
# Vídeo 03 - Gráfico de linha e pontos             #
#                                                  #
####################################################
# Venda de sorvete em relação a temperatura
vendasSorvete <- data.frame(bolasSorvete = c(200, 300, 400, 500, 600),   # Quantidade de sorvetes
Temperatura = c(20,  25,  27,  30,  32))     # Temperatura
# Nomes da colunas
colnames(vendasSorvete) <- c("Qtd.Sorvete","Temperatura")
# Cria gráfico de pontos
plot(x = vendasSorvete$Temperatura,  # Eixo X com a temperatura
y = vendasSorvete$Qtd.Sorvete)  # Eixo Y com a quantidade de sorvetes
# Adiciona linha entre os pontos
lines(x = vendasSorvete$Temperatura,
y = vendasSorvete$Qtd.Sorvete,
col = "red")
####################################################
#                                                  #
# Módulo 8 - Gráficos                              #
#                                                  #
# Vídeo 03 - Gráfico de linha e pontos             #
#                                                  #
####################################################
# Venda de sorvete em relação a temperatura
vendasSorvete <- data.frame(bolasSorvete = c(200, 300, 400, 500, 600),   # Quantidade de sorvetes
Temperatura = c(20,  25,  27,  30,  32))     # Temperatura
# Cria gráfico de pontos
plot(x = vendasSorvete$Temperatura,  # Eixo X com a temperatura
y = vendasSorvete$Qtd.Sorvete)  # Eixo Y com a quantidade de sorvetes
# Adiciona linha entre os pontos
lines(x = vendasSorvete$Temperatura,
y = vendasSorvete$Qtd.Sorvete,
col = "red")
# Usando o pacote ggplot2
# Instalando o pacote
if (!require(ggplot2)) install.packages(("ggplot2"))
library("ggplot2")
df <- data.frame(tratamento = c("a", "b", "c"),
tamanho = c(1.3, 1.9, 3.2))
##############################################
# Módulo 7 - Limpeza                         #
#                                            #
# Vídeo 01 - Removendo espaços em branco     #
##############################################
# NAs - Dados ausentes
# Instalando e carregando o pacote
if (!require(tidyverse)) install.packages(("tidyverse"))
library("tidyverse")
bike <- read_csv("raw_bike_data.csv")
table(is.na(bike)) # Encontra dados ausentes no data frame
##############################################
# Módulo 7 - Limpeza                         #
#                                            #
# Vídeo 01 - Removendo espaços em branco     #
##############################################
# NAs - Dados ausentes
# Instalando e carregando o pacote
if (!require(tidyverse)) install.packages(("tidyverse"))
library("tidyverse")
# Visualização e definição do diretório de trabalho
getwd()
setwd("d:/Users/eduardo.mendes/Desktop/Linguagem R/Aula07")
# Lendo o arquivo csv
bike <- read_csv("raw_bike_data.csv")
class(bike) # Data frame
##############################################
# Módulo 7 - Limpeza                         #
#                                            #
# Vídeo 01 - Removendo espaços em branco     #
##############################################
if (!require(tidyverse)) install.packages(("tidyverse"))
library("tidyverse")
bike <- read_csv("raw_bike_data.csv")
table(is.na(bike)) # Encontra dados ausentes no data frame
################################################
# Módulo 7 - Limpeza                           #
#                                              #
# Vídeo 02 - Removendo caracteres indesejados  #
################################################
if (!require(stringr)) install.packages(("stringr"))
library("stringr")
grandesMetropolis <- c("São Pauloxx", "New York", "Sapiranga", "Londres")
str_remove(
string = grandesMetropolis,
pattern = "xx"
)
##############################################
# Módulo 7 - Limpeza                         #
#                                            #
# Vídeo 03 - Variáveis categóricas           #
##############################################
if (!require(tidyverse)) install.packages(("tidyverse"))
library("tidyverse")
bike$holiday <- factor(bike$holiday, levels = c(0,1),
labels = c("nao", "sim"))
##############################################
# Módulo 7 - Limpeza                         #
#                                            #
# Vídeo 03 - Variáveis categóricas           #
##############################################
if (!require(tidyverse)) install.packages(("tidyverse"))
library("tidyverse")
bike <- read_csv("raw_bike_data.csv")
bike$holiday <- factor(bike$holiday, levels = c(0,1),
labels = c("nao", "sim"))
##############################################
# Módulo 7 - Limpeza                         #
#                                            #
# Vídeo 04 - Conversão de datas              #
##############################################
if(!require("lubridate")) install.packages("lubridate")
##############################################
# Módulo 7 - Limpeza                         #
#                                            #
# Vídeo 04 - Conversão de datas              #
##############################################
if(!require("lubridate")) install.packages("lubridate")
library("lubridate")
bike <- read_csv("raw_bike_data.csv")
suppressMessages(suppressWarnings(library(lubridate)))
bike$data_hora <- mdy_hm(bike$datetime)
##############################################
# Módulo 7 - Limpeza                         #
#                                            #
# Vídeo 04 - Conversão de datas              #
##############################################
if(!require("lubridate")) install.packages("lubridate")
library("lubridate")
bike <- read_csv("raw_bike_data.csv")
bike$data_hora <- mdy_hm(bike$datetime)
##############################################
# Módulo 7 - Limpeza                         #
#                                            #
# Vídeo 04 - Conversão de datas              #
##############################################
if(!require("lubridate")) install.packages("lubridate")
library("lubridate")
bike <- read_csv("raw_bike_data.csv")
bike$data_hora <- mdy_hm(bike$datetime)
