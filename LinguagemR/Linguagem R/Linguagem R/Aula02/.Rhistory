# Criando variáveis numéricas
var1 <- 1
var2 <- 2
# Retorna TRUE/FALSE
result1 <- var1 == var2 # igual a
print(result1)
result2 <- var1 != var2 # diferente de (exclamação)
print(result2)
result3 <- var1 > var2  # maior que
print(result3)
result4 <- var1 < var2  # menor que
print(result4)
result5 <- var1 >= var2 # maior ou igual a
print(result5)
result6 <- var1 <= var2 # menor ou igual a
print(result6)
# Criando variáveis numéricas (atribuição)
var1 <- 'a'
var2 <- 'B'
result1 <- var1 == var2 # igual a
print(result1)
result2 <- var1 != var2 # diferente de (exclamação)
print(result2)
result3 <- var1 > var2  # maior que
print(result3)
result4 <- var1 < var2  # menor que
print(result4)
result5 <- var1 >= var2 # maior ou igual a
print(result5)
result6 <- var1 <= var2 # menor ou igual a
print(result6)
typeof(result1)
# Operador not ! (Exclamação)
res <- !TRUE
print(res)
res2 <- !(6 != 6)
print(res2)
res2 <- !(6 != 6)
res2 <- !(6 != 6)
print(res2)
# Operador or |
5>3 | 10>8  # TRUE
5>3 | 10>11 # TRUE
# Operador not ! (Exclamação)
res <- !TRUE
typeof(res)
# potência
4 ^ 2
# expoente 4 por 2
4 ** 2
# expoente 4 por 2
4 ** 3
# potência
4 ^ 3
# Vetor - estrutura básica de dados
# Uma sequencia de dados do mesmo tipo
numeros <- c(2, 5, 6, 78, 2, 233) # A função c contena os números
typeof(numeros)
class(numeros) # Confere a classe, só pode haver uma classe para todo o vetor
is.vector(numeros) # Confere se o objeto é um vetor
length(numeros) # Mostra o comprimento do vetor
names(numeros) # Não há nomes
names(numeros) <- c("n1", "n2", "n3", "n4", "n5", "n6") # Atribuir nomes ao vetor numeros
names(numeros) # Os nomes do vetor
letras <- c("a", "b", "c", "d", "e", "f") # Classe character
letras
class(letras)
logico <- c(F, T) # Classe logical
logico
class(logico)
# Indexação de vetores
numeros[2] # Seleciona o segundo valor do vetor
numeros[c(3, 6, 1)] # Seleciona o terceiro, sexto e primeiro valor do vetor
numeros[1:3] # Seleciona os primeiros três valores do vetor
numeros[12] # Índece fora dos limites, retorna um NA
numeros[-3] # Seleciona tudo, exceto o terceiro valor
numeros["n5"] # Seleciona o elemento com nome n5, no caso o quinto elemento
numeros[c(TRUE, FALSE, F, F, F, T)] # Seleciona o elemento o primeiro e último elemento
numeros[1] <- 12 # muda o valor do item 1 vetor numeros
numeros
# Criando uma matriz de 3 linhas e 2 colunas
matriz <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2) # Matriz, 3 x 2
# Criando uma matriz de 3 linhas e 2 colunas
matriz <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2) # Matriz, 3 x 2
matriz
str(matriz) # Resumo da matriz
head(matriz, n = 1) # Mostra a primeira linha
tail(matriz, n = 1) # Mostra a última linha
dim(matriz) # Dimensões da matriz, primeiro linhas o depois colunas
nrow(matriz) # Número de linhas
ncol(matriz) # Número de colunas
rownames(matriz) # Nomes das linhas, nesse caso NULL
colnames(matriz) # Nomes das colunas, nesse caso NULL
t(matriz) # Transpor a matriz
nrow(matriz) # Número de linhas
ncol(matriz) # Número de colunas
t(matriz) # Transpor a matriz
t(matriz) # Transpor a matriz
nrow(t) # Número de linhas
ncol(t) # Número de colunas
# Cria os vetores de numeros e letras
numeros <- c(2, 5, 6, 78, 2, 233) # A função c contena os números
letras <- c("a", "b", "c", "d", "e", "f") # Classe character
matriz.por.colunas <- cbind(numeros, letras) # Concatenados por colunas
matriz.por.linhas <- rbind(numeros, letras) # Concatenados por linhas
matriz.por.colunas # Note que os números ficaram entre aspas, indicando...
matriz.por.linhas # ... que foram convertidos em caracteres
#Indexação de matriz
matriz[1, 1] # Valor da linha 1 e coluna 1
matriz[1, 1, drop = FALSE] # Valor da linha 1 e coluna 1, mantendo a estrutura da matriz
matriz[-3, , drop = FALSE] # Seleciona tudo, exceto a terceira linha
matriz[3, 1] <- 0 # Nada pode ser deletado, apenas alterado o valor (incluindo NA)
matriz <- matriz[,c(2, 1)] # Mudar a ordem das colunas
matriz
vetor1 <- vetor(c("Co", "Co", "Co", "Tr", "Tr", "Tr")) # Vetor a partir de caracteres
fator1 <- factor(c("Co", "Co", "Co", "Tr", "Tr", "Tr")) # Fator a partir de caracteres
fator1 <- factor(c("Co", "Co", "Co", "Tr", "Tr", "Tr")) # Fator a partir de caracteres
matriz <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2) # Matriz, 3 x 2
minha.lista <- list(matriz, 1, fator1) # Lista com objetos variados
minha.lista
str(minha.lista) # Estrutura da lista
length(minha.lista) # Mostra o comprimento do vetor
names(minha.lista) <- c("A", "B", "C") # Atribui nomes a lista
minha.lista
# Indexação
minha.lista[1] # Acessar primeira sublista
minha.lista[[1]] # Primeiro objeto da lista
minha.lista[["C"]] # Objeto com o nome C na lista
minha.lista$A # Objeto com o nome A na lista
minha.lista[[1]][3, 2] # Primeiro objeto da lista (uma matriz), linha 3, coluna 2
minha.lista[c(2:3)] # Acessar várias sublistas. minha.lista[[c(2:3)]] não funciona
minha.lista[["C"]] <- NULL # Deletar item da lista. Mesmo que minha.lista["C"]
minha.lista$novoitem <- 1:3 # Adicionar item a lista
minha.lista
v <- c("Co", "Co", "Co", "Tr", "Tr", "Tr") # Vetor de caracteres
m <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2) # Matriz, 3 x 2
minha.lista <- list(m, 1, v) # Lista com objetos variados
minha.lista
str(minha.lista) # Estrutura da lista
length(minha.lista) # Mostra o comprimento do vetor
names(minha.lista) <- c("A", "B", "C") # Atribui nomes a lista
minha.lista
# Indexação
minha.lista[1] # Acessar primeira sublista
minha.lista[[1]] # Primeiro objeto da lista
minha.lista[["C"]] # Objeto com o nome C na lista
minha.lista$A # Objeto com o nome A na lista
minha.lista[[1]][3, 2] # Primeiro objeto da lista (uma matriz), linha 3, coluna 2
minha.lista[c(2:3)] # Acessar várias sublistas. minha.lista[[c(2:3)]] não funciona
minha.lista[["C"]] <- NULL # Deletar item da lista. Mesmo que minha.lista["C"]
minha.lista$novoitem <- 1:3 # Adicionar item a lista
minha.lista
# criando um dataframe
dados <- data.frame(
datas = c(
"2013-01-01", "2013-01-02", "2013-01-03", "2013-01-04", "2013-01-05",
"2013-01-06", "2013-01-07", "2013-01-08", "2013-01-09", "2013-01-10",
"2013-01-11", "2013-01-12", "2013-01-13", "2013-01-14", "2013-01-15"
),
cidade = rep("Santa Maria", 15),
tar = c(31, 35, 21, 23, 33, 17, 18, 16, 34, 27, 15, 28, 22, 29, 32)
)
dados
class(dados)
is.data.frame(dados)
str(dados)
str(dados)
summary(dados)
attributes(dados)
str(attributes(dados))
ncol(dados)
nrow(dados)
dim(dados)
rownames(dados)
dados
# novos nomes para as linhas de dados
rownames(dados) <- paste0("linha", rownames(dados))
dados
dados
# removendo nomes das linhas
rownames(dados) <- NULL
dados
numeros <- c(2, 5, 6, 78, 2, 233) # A função c contena os números
letras <- c("a", "b", "c", "d", "e", "f") # Classe character
y <- F # Pode ser abreviada
numeros <- c(2, 5, 6, 78, 2, 233) # A função c contena os números
letras <- c("a", "b", "c", "d", "e", "f") # Classe character
y <- F # Pode ser abreviada
dados <- data.frame(valores = numeros, letras, categorias = y) # Combinar vetores em ...
dados # ... um data.frame. Sempre por colunas
str(dados) # Resumo do data.frame
head(dados, n = 3) # Mostra as 3 primeiras linhas
tail(dados, n = 2) # Mostra as 2 últimas linhas
dim(dados) # Dimensões do data.frame, primeiro linhas o depois colunas
nrow(dados) # Número de linhas
ncol(dados) # Número de colunas
rownames(dados) # Nomes das linhas
colnames(dados) # Nomes das colunas
# Indexação
dados[2, 1] # Valor da linha 2 e coluna 1
dados[c(1,4), 2:3] # Linhas 1 e 4 das colunas 2 e 3
dados[2,] # Linha 2 com todas as colunas
dados[, 2] # Coluna 2 com todas as linhas
dados[, 2, drop = FALSE] # Coluna 2 com todas as linhas, mantendo a estrutura de tabela
letras
dados[, -3] # Seleciona tudo, exceto a terceira coluna
dados[, "letras"] # Seleciona a coluna chamada letras
dados["n1" ,] # Seleciona a linha chamada n1
dados$valores # Seleciona a coluna chamada valores
dados$novo.vetor <- c("x", "y", "z", "x", "y", "z") # Adicionar vetor...
str(dados) # ... nesse caso a classe permanece
dados$novo.vetor <- NULL # Deletar um vetor do data.frame (apenas colunas)
dados
# Declarando váriáveis (simbolo de atribuição)
var1 <- "Olá mundo"
typeof(var1)
class(var2)
typeof(var1)
class(var1)
# Declarando váriáveis (simbolo de atribuição)
# 3 formas diferentes
var1 <- 1        # primeira forma
var2 = 2         # Segunda forma
assign("var3",3) # Terceira forma, usando a função assign()
# Para verificar o tipo de dados
# A própria linguagem atribui o tipo de dado
typeof(var1) # double (ponto flutuante)
typeof(var2)
typeof(var3)
# 1 - Inteiro (numeric)
# Atribuindo o valor 2 (inteiro) a variável x "L"
x <- 2L
typeof(x)
# 3 - Complex (numeric)
# Atribuindo o valor 3 + 4i a variável z
z <- 3 + 4i
typeof(z)
#                                                  #
# Módulo 3 - Estruturas de dados                   #
#                                                  #
# Vídeo 01 - Vetor                                 #
#                                                  #
####################################################
# Os vetores (vector) são objetos que armazenam um ou mais elementos,
# do tipo numeric, character ou logical.
# Vetor - estrutura básica de dados
# Uma sequencia de dados do mesmo tipo
numeros <- c(2, 5, 6, 78, 2, 233) # A função c concatena os números
is.vector(numeros) # Confere se o objeto é um vetor
class(numeros) # Confere a classe, só pode haver uma classe para todo o vetor
length(numeros) # Mostra o comprimento do vetor
names(numeros) # Não há nomes
names(numeros) <- c("n1", "n2", "n3", "n4", "n5", "n6") # Atribuir nomes ao vetor numeros
names(numeros) # Os nomes do vetor
# Criando uma matriz de 3 linhas e 2 colunas
matriz <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2) # Matriz, 3 x 2
matriz
str(matriz) # Resumo da matriz
head(matriz, n = 1) # Mostra a primeira linha
tail(matriz, n = 1) # Mostra a última linha
dim(matriz) # Dimensões da matriz, primeiro linhas o depois colunas
nrow(matriz) # Número de linhas
ncol(matriz) # Número de colunas
rownames(matriz) # Nomes das linhas, nesse caso NULL
colnames(matriz) # Nomes das colunas, nesse caso NULL
# Cria os vetores de numeros e letras
numeros <- c(2, 5, 6, 78, 2, 233) # A função c contena os números
letras <- c("a", "b", "c", "d", "e", "f") # Classe character
matriz.por.colunas <- cbind(numeros, letras) # Concatenados por colunas
matriz.por.linhas <- rbind(numeros, letras) # Concatenados por linhas
matriz.por.colunas # Note que os números ficaram entre aspas, indicando...
matriz.por.linhas # ... que foram convertidos em caracteres
# parte inteira da divisão de 5 por 3
5 %/% 3
# resto da divisão de 5 por 3
print(5 %% 3)
# parte inteira da divisão de 5 por 3
print(5 %/% 3)
logico <- c(F, T) # Classe logical
logico
logico <- c(F, T) # Classe logical
print(logico)
# Criando uma matriz de 3 linhas e 2 colunas
matriz <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2) # Matriz, 3 x 2
#Indexação de matriz
matriz[1, 1] # Valor da linha 1 e coluna 1
matriz[-3, , drop = FALSE] # Seleciona tudo, exceto a terceira linha
matriz[3, 1] <- 0 # Nada pode ser deletado, apenas alterado o valor (incluindo NA)
matriz[1, 1, drop = FALSE] # Valor da linha 1 e coluna 1, mantendo a estrutura da matriz
#Indexação de matriz
matriz[1, 1] # Valor da linha 1 e coluna 1
# Criando uma matriz de 3 linhas e 2 colunas
matriz <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2) # Matriz, 3 x 2
matriz
print(matriz[1,1])
print(matriz[2,2])
# Cria um vetor e uma matriz 3 x 2
v <- c("Co", "Co", "Co", "Tr", "Tr", "Tr")
m <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2)
minha.lista <- list(m, 1, v) # Lista com objetos variados
print(minha.lista[[1]])
# Cria um vetor e uma matriz 3 x 2
v <- c("Co", "Co", "Co", "Tr", "Tr", "Tr")
m <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2)
minha.lista <- list(m, 1, v)
print(minha.lista[[1]])
print(minha.lista[[1, 2]])
print(minha.lista[[1]])
print(minha.lista[1])
# Cria um vetor e uma matriz 3 x 2
v <- c("Co", "Co", "Co", "Tr", "Tr", "Tr")
m <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 3, ncol = 2)
minha.lista <- list(m, 1, v)
minha.lista
print(minha.lista[2])
numeros <- c(2, 5, 6, 78, 2, 233)
letras <- c("a", "b", "c", "d", "e", "f")
y <- F
dados <- data.frame(valores = numeros, letras, categorias = y)
print(dados[2, 1])
dados
print(dados[2, 1])
y <- 20
if (y == 20) {
res <- "Número igual a 20"
} else {
res <- "Número diferente de 20"
}
print(res)
for (i in x) { # Sabemos quantas vezes deve ser repetido
x2 <- i+2
}
x <- c(1, 2, 4, 5, 7, 9, 11)
for (i in x) { # Sabemos quantas vezes deve ser repetido
x2 <- i+2
}
print(x2)
x <- 1
while(x <= 10) { # Teste lógico, se for TRUE os comando são executados
x <- x + 1
}
print(x)
y = 1
i = 1
repeat{
i = i + 1
y[i] = i
if(i==100)
break
}
print(y)
# Bloco repeat, vai executar enquanto i for menor ou igual a 10
repeat{
if (i <= 10) { # Condição para determinar quando sair do laço
soma <- soma + i
i <- i + 1
} else {
break
}
}
print(soma)
# Criando e inicializando as variáveis
i <- 1
soma <- 0
repeat{
if (i <= 10) { # Condição para determinar quando sair do laço
soma <- soma + i
i <- i + 1
} else {
break
}
}
print(soma)
